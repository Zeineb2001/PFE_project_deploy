apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: {{ .Values.kafka.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka-container
          image: {{ .Values.kafka.image.repository }}:{{ .Values.kafka.image.tag }}
          imagePullPolicy: {{ .Values.kafka.image.pullPolicy }}
          env:
            - name: KAFKA_BROKER_ID
              value: "{{ .Values.kafka.env.KAFKA_BROKER_ID }}"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ .Values.kafka.env.KAFKA_ZOOKEEPER_CONNECT }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "{{ .Values.kafka.env.KAFKA_ADVERTISED_LISTENERS }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "{{ .Values.kafka.env.KAFKA_LISTENER_SECURITY_PROTOCOL_MAP }}"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "{{ .Values.kafka.env.KAFKA_INTER_BROKER_LISTENER_NAME }}"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "{{ .Values.kafka.env.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR }}"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "{{ .Values.kafka.env.KAFKA_AUTO_CREATE_TOPICS_ENABLE }}"      
      imagePullSecrets:
            - name: harbor-secret  
---

apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: kafka
  type: {{ .Values.kafka.service.type }}
